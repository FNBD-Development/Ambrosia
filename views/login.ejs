<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Ambrosia | Management Made Simple.</title>
<link rel="stylesheet" href="/assets/css/tailwind_light_login.css">
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link rel="stylesheet"
    href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
<meta content="Ambrosia" property="og:title" />
<meta content="Ambrosia is a multiperpose Status Monitor" property="og:description" />
<meta content="https://<%=process.env.fqdn%>" property="og:url" />
<meta content="#43B581" data-react-helmet="true" name="theme-color" />
<link rel="stylesheet" href="https://site-assets.fontawesome.com/releases/v6.5.1/css/all.css"/>
  </head>

  <html class="">
    <body class="flex  bg-white items-center py-16 justify-center m-0">
          <main class="flex flex-col items-center  justify-center relative z-10 max-w-md mx-auto p-6">
          
        <div
          class="mt-7 bg-gray-200 border border-gray-300 rounded-xl  dark:bg-zinc-800 dark:border-zinc-900/80"
        >
          <div class="p-4 sm:p-7">
            <div class="text-left flex items-center justify-between">
              <h1
                class="block text-2xl font-bold mr-5 text-gray-800 dark:text-white"
              >
                Sign in
              </h1>

              <button
                disabled
                type="button"
                class="flex items-center cursor-not-allowed py-3 px-4 inline-flex justify-center items-center gap-2 rounded-md border font-medium bg-white text-gray-700 shadow-sm align-middle hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-white focus:ring-blue-600 transition-all text-sm dark:bg-zinc-700/80 dark:hover:bg-zinc-700/60 dark:border-zinc-700 dark:text-gray-400 dark:hover:text-white dark:focus:ring-offset-zinc-800"
              >
                <span class="material-symbols-rounded"> devices </span>
                Sign in using random id
              </button>
            </div>

            <div class="mt-5">
              <div
                class="py-3 flex items-center text-xs text-gray-400 uppercase before:flex-[1_1_0%] before:border-t before:border-gray-200 before:mr-6 after:flex-[1_1_0%] after:border-t after:border-gray-200 after:ml-6 dark:text-gray-500 dark:before:border-gray-600 dark:after:border-gray-600"
              >
                Or
              </div>

              <!-- Form -->
              <div class="grid gap-y-4">
                <!-- Form Group -->
                <div>
                  <label for="email" class="block text-sm mb-2 dark:text-white"
                    >Username</label
                  >
                  <div class="relative">
                    <input
                      type="name"
                      id="name"
                      name="email"
                      class="py-3 px-4 block w-full bg-[#fafafa] border-gray-300 border rounded-md text-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-zinc-700/50 dark:hover:bg-zinc-700/30 dark:border-zinc-700 dark:text-gray-400"
                      required
                      aria-describedby="email-error"
                    />
                    <div
                      class="hidden absolute inset-y-0 right-0 flex items-center pointer-events-none pr-3"
                    >
                      <svg
                        class="h-5 w-5 text-red-500"
                        width="16"
                        height="16"
                        fill="currentColor"
                        viewBox="0 0 16 16"
                        aria-hidden="true"
                      >
                        <path
                          d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8 4a.905.905 0 0 0-.9.995l.35 3.507a.552.552 0 0 0 1.1 0l.35-3.507A.905.905 0 0 0 8 4zm.002 6a1 1 0 1 0 0 2 1 1 0 0 0 0-2z"
                        />
                      </svg>
                    </div>
                  </div>
                  <p class="hidden text-xs text-red-600 mt-2" id="email-error">
                    Please include a name to log you in
                  </p>
                </div>
                <!-- End Form Group -->

                <!-- Form Group -->
                <div>
                  <div class="flex justify-between items-center">
                    <label
                      for="password"
                      class="block text-sm mb-2 dark:text-white"
                      >Password</label
                    >
                  </div>
                  <div class="relative">
                    <input
                      type="password"
                      id="password"
                      name="password"
                      class="py-3 px-4 block w-full bg-[#fafafa] border-gray-300 border rounded-md text-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-zinc-700/50 dark:hover:bg-zinc-700/30 dark:border-zinc-700 dark:text-gray-400"
                      required
                      aria-describedby="password-error"
                    />
                    <div
                      class="hidden absolute inset-y-0 right-0 flex items-center pointer-events-none pr-3"
                    >
                      <svg
                        class="h-5 w-5 text-red-500"
                        width="16"
                        height="16"
                        fill="currentColor"
                        viewBox="0 0 16 16"
                        aria-hidden="true"
                      >
                        <path
                          d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8 4a.905.905 0 0 0-.9.995l.35 3.507a.552.552 0 0 0 1.1 0l.35-3.507A.905.905 0 0 0 8 4zm.002 6a1 1 0 1 0 0 2 1 1 0 0 0 0-2z"
                        />
                      </svg>
                    </div>
                  </div>
                  <p
                    class="hidden text-xs text-red-600 mt-2"
                    id="password-error"
                  >
                    8+ characters required
                  </p>
                </div>
                <!-- End Form Group -->

                <!-- Checkbox -->
                <!-- This does absoultely nothing in backend-->
                <div class="flex items-center">
                  <div class="flex">
                    <input
                      id="remember-me"
                      name="remember-me"
                      type="checkbox"
                      class="shrink-0 mt-0.5 rounded-md text-blue-600 pointer-events-none focus:ring-blue-500 dark:bg-gray-800 dark:border-gray-700 dark:checked:bg-blue-500 dark:checked:border-blue-500 dark:focus:ring-offset-gray-800"
                    />
                  </div>
                  <div class="ml-3">
                    <label for="remember-me" class="text-sm dark:text-white"
                      >Remember me</label
                    >
                  </div>
                </div>
                <!-- End Checkbox -->
              
                <button
                  type="submit"
                  onclick="login()"
                  class="py-3 px-4 inline-flex justify-center  items-center gap-2 rounded-md border border-blue-500/80 font-semibold bg-blue-500 text-white hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all text-sm dark:focus:ring-offset-gray-800"
                >
                  Sign in
                </button>
              </div>
              <!-- End Form -->

            </div>
          </div>
        </div>
    </div>
      </main>
    </div>
  </div>
    </body>
  </html>
  <script>
    const HSThemeAppearance = {
      init() {
        const defaultTheme = "default";
        let theme = localStorage.getItem("hs_theme") || defaultTheme;

        if (document.querySelector("html").classList.contains("dark")) return;
        this.setAppearance(theme);
      },
      _resetStylesOnLoad() {
        const $resetStyles = document.createElement("style");
        $resetStyles.innerText = `*{transition: unset !important;}`;
        $resetStyles.setAttribute("data-hs-appearance-onload-styles", "");
        document.head.appendChild($resetStyles);
        return $resetStyles;
      },
      setAppearance(theme, saveInStore = true, dispatchEvent = true) {
        const $resetStylesEl = this._resetStylesOnLoad();

        if (saveInStore) {
          localStorage.setItem("hs_theme", theme);
        }

        if (theme === "auto") {
          theme = window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "default";
        }

        document.querySelector("html").classList.remove("dark");
        document.querySelector("html").classList.remove("default");
        document.querySelector("html").classList.remove("auto");

        document
          .querySelector("html")
          .classList.add(this.getOriginalAppearance());

        setTimeout(() => {
          $resetStylesEl.remove();
        });

        if (dispatchEvent) {
          window.dispatchEvent(
            new CustomEvent("on-hs-appearance-change", { detail: theme })
          );
        }
      },
      getAppearance() {
        let theme = this.getOriginalAppearance();
        if (theme === "auto") {
          theme = window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "default";
        }
        return theme;
      },
      getOriginalAppearance() {
        const defaultTheme = "default";
        return localStorage.getItem("hs_theme") || defaultTheme;
      },
    };
    HSThemeAppearance.init();

    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", (e) => {
        if (HSThemeAppearance.getOriginalAppearance() === "auto") {
          HSThemeAppearance.setAppearance("auto", false);
        }
      });

    window.addEventListener("load", () => {
      const $clickableThemes = document.querySelectorAll(
        "[data-hs-theme-click-value]"
      );
      const $switchableThemes = document.querySelectorAll(
        "[data-hs-theme-switch]"
      );

      $clickableThemes.forEach(($item) => {
        $item.addEventListener("click", () =>
          HSThemeAppearance.setAppearance(
            $item.getAttribute("data-hs-theme-click-value"),
            true,
            $item
          )
        );
      });

      $switchableThemes.forEach(($item) => {
        $item.addEventListener("change", (e) => {
          HSThemeAppearance.setAppearance(
            e.target.checked ? "dark" : "default"
          );
        });

        $item.checked = HSThemeAppearance.getAppearance() === "dark";
      });

      window.addEventListener("on-hs-appearance-change", (e) => {
        $switchableThemes.forEach(($item) => {
          $item.checked = e.detail === "dark";
        });
      });
    });

    const Toast = Swal.mixin({
      toast: true,
      position: "bottom-right",
      customClass: {
        popup: "colored-toast",
      },
      showConfirmButton: false,
      timer: 1500,
      timerProgressBar: true,
    });

    function login() {
      if (!document.getElementById("name").value) {
        document
          .getElementById("name")
          .classList.add(
            "border-red-500",
            "focus:border-red-500",
            "focus:ring-red-500",
            "border"
          );
        Toast.fire({
          icon: "error",
          title: "error",
          discription: "Sent request to API!",
        });
      }
      if (document.getElementById("name").value) {
        document
          .getElementById("password")
          .classList.remove(
            "border-red-500",
            "focus:border-red-500",
            "focus:ring-red-500",
            "border"
          );
      }

      if (!document.getElementById("password").value) {
        document
          .getElementById("password")
          .classList.add(
            "border-red-500",
            "focus:border-red-500",
            "focus:ring-red-500",
            "border"
          );
        Toast.fire({
          icon: "error",
          title: "error",
          discription: "Sent request to API!",
        });
      }
      if (document.getElementById("password").value) {
        document
          .getElementById("password")
          .classList.remove(
            "border-red-500",
            "focus:border-red-500",
            "focus:ring-red-500",
            "border"
          );
      }

      if (
        document.getElementById("password").value &&
        document.getElementById("name").value
      ) {
        axios
          .post("/api/login", {
            name: document.getElementById("name").value,
            password: document.getElementById("password").value,
          })
          .then((response) => {
            Swal.fire({
              icon: response.data.icon,
              title: response.data.title,
              text: response.data.discription,
            });
            setTimeout(() => {
              window.location.replace("/");
            }, 2000);
          })
          .catch((error) => {
            Toast.fire({
              icon: "error",
              title: "Error",
              description: "Failed to send the request to the API!",
            });
            console.error("API request error:", error);
          });
      }
    }
  </script>
      <script>
        // Check localStorage for the theme preference
        var theme = localStorage.getItem('hs-theme');

        // If no theme preference is found, default to 'light'
        if (!theme) {
            theme = 'light';
        }

        // Apply the current theme to the document
        document.documentElement.classList.add(theme);
    </script>
</html>
