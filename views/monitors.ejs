<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include('../templates/header.ejs') %>
  </head>

  <body class="bg-white dark:bg-zinc-900">
    <!-- ========== HEADER ========== -->
    <header
    class="sticky top-0 inset-x-0 flex flex-wrap sm:justify-start sm:flex-nowrap z-[48] w-full  text-sm py-2.5 sm:py-4 lg:pl-64 bg-gray-200 backdrop-blur-md dark:bg-zinc-800">
    <nav class="flex basis-full items-center w-full mx-auto px-4 sm:px-6 md:px-8" aria-label="Global">
        <div class="mr-5 lg:mr-0 lg:hidden">
            <a class="flex-none text-xl font-semibold dark:text-white" href="#" aria-label="Ambrosia">Ambrosia</a>
        </div>

        <div class="w-full flex items-center justify-end ml-auto sm:justify-between sm:gap-x-3 sm:order-3">
            <div class="sm:hidden">
                <button type="button"
                    class="inline-flex flex-shrink-0 justify-center items-center gap-2 h-[2.375rem] w-[2.375rem] rounded-full font-medium bg-white text-gray-700 align-middle hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2 focus:ring-offset-white transition-all text-xs dark:bg-zinc-700/50 dark:hover:bg-zinc-700/30 dark:text-gray-400 dark:hover:text-white dark:focus:ring-gray-700 dark:focus:ring-offset-gray-800">
                    <svg class="w-3.5 h-3.5" xmlns="http://www.w3.org/2000/svg" width="16" height="16"
                        fill="currentColor" viewBox="0 0 16 16">
                        <path
                            d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
                    </svg>
                </button>
            </div>

            <div class="hidden sm:block">
                <label for="icon" class="sr-only">Search</label>
                <div class="relative">
                    <div class="absolute inset-y-0 left-0 flex items-center pointer-events-none z-20 pl-4">
                        <svg class="h-4 w-4 text-gray-400" xmlns="http://www.w3.org/2000/svg" width="16" height="16"
                            fill="currentColor" viewBox="0 0 16 16">
                            <path
                                d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
                        </svg>
                    </div>
                    <input type="text" id="icon" name="icon"
                        class="py-2 px-4 pl-11 block w-full border-gray-200 shadow-sm rounded-md text-sm focus:z-10 focus:border-blue-500 focus:ring-blue-500 dark:bg-zinc-700/50 dark:hover:bg-zinc-700/30 dark:border-gray-700 dark:text-gray-400"
                        placeholder="Search">
                </div>
            </div>

            <div class="flex flex-row items-center justify-end gap-2">
                <div class="hs-dropdown relative inline-flex [--placement:bottom-right]">
                    <button id="hs-dropdown-with-header" type="button"
                        class="hs-dropdown-toggle inline-flex flex-shrink-0 justify-center items-center gap-2 h-[2.375rem] w-[2.375rem] rounded-full font-medium bg-white text-gray-700 align-middle hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2 focus:ring-offset-white transition-all text-xs dark:bg-zinc-700/50 dark:hover:bg-zinc-700/30 dark:text-gray-400 dark:hover:text-white dark:focus:ring-gray-700 dark:focus:ring-offset-gray-800">
                        <span class="material-symbols-rounded">
                            inbox
                        </span>
                        <span
                            class="absolute top-0 right-0 inline-flex items-center py-0.5 px-1.5 rounded-full text-xs transform -translate-y-1/2 translate-x-1/2 bg-rose-500 text-white">99+</span>
                    </button>

                    <div class="hs-dropdown-menu transition-[opacity,margin] duration hs-dropdown-open:opacity-100 opacity-0 hidden min-w-[15rem] bg-white shadow-md rounded-lg p-2  dark:bg-zinc-700/30  dark:border dark:border-gray-700 backdrop-blur-md"
                        aria-labelledby="hs-dropdown-with-header">
                        <div class="mt-2 py-2 first:pt-0 last:pb-0 gap-5">
                          <% if (users.inbox.filter(a => a.closed == false).length == 0) { %>
                            <p class="text-gray-300 text-center">Theres no mail!</p>
                           <% } %>
                               <% users.inbox.forEach( (ibox)=> { %>
                                   <% if (ibox.type==="success" ) { %>
                                       <% if (ibox.closed==false) { %>
                                           <div class="bg-green-50 border border-green-200 mb-1 text-sm text-green-600 rounded-md p-4 flex justify-between"
                                               role="alert">
                                               <div>
                                                   <span class="font-bold">Success </span>
                                                   <%= ibox.discription %>
                                               </div> 
                                               <button class="material-symbols-rounded" onclick="closeinbox(`<%= ibox.cid %>`)" id="<%= ibox.cid %>">
                                                   close
                                               </button>
                                           </div>
                                           <% } %>
                                               <% } %>

                                                   <% if (ibox.type==="error" ) { %>
                                                       <div class="bg-red-50 border border-red-200 mb-1 text-sm text-red-600 rounded-md p-4"
                                                           role="alert">
                                                           <span class="font-bold">Error </span>
                                                           <%= ibox.discription %>
                                                       </div>
                                                       <% } %>

                                                           <% if (ibox.type==="warn" ) { %>
                                                               <div class="bg-orange-50 border border-orange-200 mb-1 text-sm text-orange-600 rounded-md p-4"
                                                                   role="alert">
                                                                   <span class="font-bold">Warning </span>
                                                                   <%= ibox.discription %>
                                                               </div>
                                                               <% } %>

                                                                   <% }) %>
                        </div>
                    </div>
                </div>
                <button type="button"
                    class="hs-dropdown-toggle inline-flex flex-shrink-0 justify-center items-center gap-2 h-[2.375rem] w-[2.375rem] rounded-full font-medium bg-white text-gray-700 align-middle hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2 focus:ring-offset-white transition-all text-xs dark:bg-zinc-700/50 dark:hover:bg-zinc-700/30 dark:text-gray-400 dark:hover:text-white dark:focus:ring-gray-700 dark:focus:ring-offset-gray-800"
                    data-hs-offcanvas="#hs-offcanvas-right">
                    <a class="hs-dark-mode-active:hidden block hs-dark-mode group flex items-center text-gray-600 hover:text-blue-600 font-medium dark:text-gray-400 dark:hover:text-gray-500"
                        href="#!" data-hs-theme-click-value="dark">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                            stroke="currentColor" class="w-6 h-6">
                            <path stroke-linecap="round" stroke-linejoin="round"
                                d="M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z" />
                        </svg>

                    </a>
                    <a class="hs-dark-mode-active:block hidden hs-dark-mode group flex items-center text-gray-600 hover:text-blue-600 font-medium dark:text-gray-400 dark:hover:text-gray-500"
                        href="#!" data-hs-theme-click-value="light">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                            stroke="currentColor" class="w-6 h-6">
                            <path stroke-linecap="round" stroke-linejoin="round"
                                d="M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z" />
                        </svg>

                    </a>
                </button>

                <div class="hs-dropdown relative inline-flex [--placement:bottom-right]">
                    <button id="hs-dropdown-with-header" type="button"
                        class="hs-dropdown-toggle inline-flex flex-shrink-0 justify-center items-center gap-2 h-[2.375rem] w-[2.375rem] rounded-full font-medium bg-white text-gray-700 align-middle hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2 focus:ring-offset-white transition-all text-xs dark:bg-zinc-700/50 dark:hover:bg-zinc-700/30 dark:text-gray-400 dark:hover:text-white dark:focus:ring-gray-700 dark:focus:ring-offset-gray-800">
                        <img class="inline-block h-[2.375rem] w-[2.375rem] rounded-full ring-2 ring-white dark:ring-gray-800"
                            src="<%=users.avatar%>"
                            alt="Image Description">
                    </button>

                    <div class="hs-dropdown-menu transition-[opacity,margin] duration hs-dropdown-open:opacity-100 opacity-0 hidden min-w-[15rem] bg-white shadow-md rounded-lg p-2  dark:bg-zinc-700/30  dark:border dark:border-gray-700 backdrop-blur-md"
                        aria-labelledby="hs-dropdown-with-header">
                        <div class="py-3 px-5 -m-2 bg-gray-100 rounded-t-lg dark:bg-zinc-700/50">
                            <p class="text-sm text-gray-500 dark:text-gray-400">Signed in as</p>
                            <p class="text-sm font-medium text-gray-800 dark:text-gray-300"><%= users.name %></p>
                        </div>
                        <div class="mt-2 py-2 first:pt-0 last:pb-0">
                            <% if (users.role == "Owner") { %>
                            <a class="flex items-center gap-x-3.5 py-2 px-3 rounded-md text-sm text-gray-800 hover:bg-gray-100 focus:ring-2 focus:ring-blue-500 dark:text-gray-400 dark:hover:bg-zinc-900/60 dark:hover:text-gray-300"
                                href="#">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M9.594 3.94c.09-.542.56-.94 1.11-.94h2.593c.55 0 1.02.398 1.11.94l.213 1.281c.063.374.313.686.645.87.074.04.147.083.22.127.324.196.72.257 1.075.124l1.217-.456a1.125 1.125 0 011.37.49l1.296 2.247a1.125 1.125 0 01-.26 1.431l-1.003.827c-.293.24-.438.613-.431.992a6.759 6.759 0 010 .255c-.007.378.138.75.43.99l1.005.828c.424.35.534.954.26 1.43l-1.298 2.247a1.125 1.125 0 01-1.369.491l-1.217-.456c-.355-.133-.75-.072-1.076.124a6.57 6.57 0 01-.22.128c-.331.183-.581.495-.644.869l-.213 1.28c-.09.543-.56.941-1.11.941h-2.594c-.55 0-1.02-.398-1.11-.94l-.213-1.281c-.062-.374-.312-.686-.644-.87a6.52 6.52 0 01-.22-.127c-.325-.196-.72-.257-1.076-.124l-1.217.456a1.125 1.125 0 01-1.369-.49l-1.297-2.247a1.125 1.125 0 01.26-1.431l1.004-.827c.292-.24.437-.613.43-.992a6.932 6.932 0 010-.255c.007-.378-.138-.75-.43-.99l-1.004-.828a1.125 1.125 0 01-.26-1.43l1.297-2.247a1.125 1.125 0 011.37-.491l1.216.456c.356.133.751.072 1.076-.124.072-.044.146-.087.22-.128.332-.183.582-.495.644-.869l.214-1.281z" />
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                  </svg>                                      
                                Settings
                            </a>
                            <% } %>
                            <a class="flex items-center gap-x-3.5 py-2 px-3 rounded-md text-sm text-gray-800 hover:bg-gray-100 focus:ring-2 focus:ring-blue-500 dark:text-gray-400 dark:hover:bg-zinc-900/60 dark:hover:text-gray-300"
                                href="#">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M17.982 18.725A7.488 7.488 0 0012 15.75a7.488 7.488 0 00-5.982 2.975m11.963 0a9 9 0 10-11.963 0m11.963 0A8.966 8.966 0 0112 21a8.966 8.966 0 01-5.982-2.275M15 9.75a3 3 0 11-6 0 3 3 0 016 0z" />
                                  </svg>
                                  
                                Profile
                            </a>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </nav>
</header>
    <!-- ========== END HEADER ========== -->

    <!-- ========== MAIN CONTENT ========== -->
    <!-- Sidebar Toggle -->
    <div
      class="sticky top-0 inset-x-0 z-20 bg-white border-y px-4 sm:px-6 md:px-8 lg:hidden dark:bg-zinc-700 dark:border-gray-700"
    >
      <div class="flex items-center py-4">
        <!-- Navigation Toggle -->
        <button
          type="button"
          class="text-gray-500 hover:text-gray-600"
          data-hs-overlay="#application-sidebar"
          aria-controls="application-sidebar"
          aria-label="Toggle navigation"
        >
          <span class="sr-only">Toggle Navigation</span>
          <svg
            class="w-5 h-5"
            width="16"
            height="16"
            fill="currentColor"
            viewBox="0 0 16 16"
          >
            <path
              fill-rule="evenodd"
              d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z"
            />
          </svg>
        </button>
        <!-- End Navigation Toggle -->

        <!-- Breadcrumb -->
        <ol
          class="ml-3 flex items-center whitespace-nowrap min-w-0"
          aria-label="Breadcrumb"
        >
          <li
            class="flex items-center text-sm text-gray-800 dark:text-gray-400"
          >
            Application Layout
            <span class="material-symbols-rounded"> home </span>
          </li>
          <li
            class="text-sm font-semibold text-gray-800 truncate dark:text-gray-400"
            aria-current="page"
          >
            Dashboard
          </li>
        </ol>
        <!-- End Breadcrumb -->
      </div>
    </div>
    <!-- End Sidebar Toggle -->

    <!-- Sidebar -->
    <%- include('../templates/sidebar.ejs') %>

    <!-- End Sidebar -->

    <!-- Content -->
    <div class="w-full pt-10 px-4 sm:px-6 md:px-8 lg:pl-72">
      <!-- Page Heading -->
      <header class="" id="header">
        <div class="max-w-[85rem] px-4 sm:px-3 lg:px-8 lg:py-3 mx-auto">
       
      <div class="max-w-[85rem] px-2 sm:px-3 lg:px-8 lg:py-3 mx-auto">
        <div class="grid sm:grid-cols-1 md:sm-cols-2 lg:grid-cols-3 xl:grid-cols-3 gap-3">
          <% monitor.forEach( (data) => { %>
            <% let trueCount=data.data.filter(da=> da.status === true).length; %>
              <% let falseCount=data.data.length - trueCount; %>
                <% let truePercentage=(trueCount / data.data.length) * 100; %>
                  <% let falsePercentage=(falseCount / data.data.length) * 100; %>

                    <div
                      class="flex flex-col bg-[#f3f3f3] border shadow-sm rounded-md dark:bg-zinc-800/50 dark:border-zinc-800 p-4">
                      <div class="flex justify-between items-center">
                        <h1 class="text-2xl font-semibold dark:text-white">
                          <%= data.name %>let
                        </h1>
                        <perc class="text-2xl text-gray-800 dark:text-gray-200">
                          <%= truePercentage.toFixed(1) %>%
                        </perc>
                      </div>
                      <div class="mt-2">
                        <div class="dark:bg-zinc-700/50 bg-[#e6e6e6] flex items-center gap-1 dark:border-zinc-900 p-2 rounded-md">
                          <% let blobsPerRow = 17; %>
                          <% let totalBlobCount = Math.min(blobsPerRow, data.data.length); %>
                          <% for (let i = 0; i < blobsPerRow; i++) { %>
                            <% let dataIndex = i < totalBlobCount ? i : i - (data.data.length - totalBlobCount); %>
                            <% let da = data.data[dataIndex]; %>

                            <% let isTrueBlob = da && da.status === true; %>
                            <div class="relative">
                              <div class="hs-tooltip">
                                <div class="<%= isTrueBlob ? 'bg-green-500' : 'bg-red-500' %> rounded-full h-7 w-3"></div>
                                <span class="hs-tooltip-content hs-tooltip-shown:opacity-100 hs-tooltip-shown:visible opacity-0 transition-opacity inline-block absolute invisible z-10 py-1 px-2 bg-gray-900 text-xs font-medium text-white rounded shadow-sm dark:border-gray-700 dark:text-gray-400 dark:bg-zinc-900/50" role="tooltip">
                                  <% if (da && da.unix) { %>
                                    <% let timestamp = da.unix; %>
                                    <% let date = new Date(timestamp / 1000); %>
                                    <%= da.ping %>ms | <%= formatHumanReadableDate(date) %>
                                  <% } else { %>
                                    <!-- Handle the case where 'unix' is undefined or not present -->
                                    <!-- You can add a default value or skip rendering this part -->
                                    <span class="<%= isTrueBlob ? 'text-gray-500' : 'text-gray-500' %>">N/A</span>
                                  <% } %>
                                </span>
                              </div>
                            </div>
                          <% } %>
                        </div>
                        
                      </div>
                    </div>
                    <% }) %>


                      <% function formatHumanReadableDate(date) { const options={ year: 'numeric' , month: 'long' ,
                        day: 'numeric' , hour: 'numeric' , minute: 'numeric' }; return date.toLocaleDateString('en-US',
                        options); } %>
        </div>
      </div>
          <button
            type="button"
            class="mt-2 py-3 px-4 inline-flex justify-center items-center gap-2 rounded-md border border-transparent font-semibold bg-blue-500 text-white hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all text-sm dark:focus:ring-offset-gray-800"
            data-hs-overlay="#hs-overlay"
          >
            Add new
          </button>

          <div
            id="hs-overlay"
            class="hs-overlay hs-overlay-open:translate-x-0 hidden translate-x-full fixed top-0 right-0 transition-all duration-300 transform h-full w-full z-[60] bg-gray-200 border-l drop-shadow-md dark:bg-zinc-800 dark:border-zinc-700 [--overlay-backdrop:false]"
            tabindex="-1"
          >
            <div
              class="flex justify-between items-center py-3 px-4 border dark:border-zinc-700 dark:bg-zinc-700/50 backdrop-none"
            >
              <h3 class="font-bold text-gray-800 dark:text-white">
                Add new monitors
              </h3>
              <button
                type="button"
                class="inline-flex flex-shrink-0 justify-center items-center h-8 w-8 rounded-md text-gray-500 hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-offset-2 focus:ring-offset-white text-sm dark:text-gray-500 dark:hover:text-gray-400 dark:focus:ring-gray-700 dark:focus:ring-offset-gray-800"
                data-hs-overlay="#hs-overlay"
              >
                <span class="sr-only">Close modal</span>
                <svg
                  class="w-3.5 h-3.5"
                  width="8"
                  height="8"
                  viewBox="0 0 8 8"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M0.258206 1.00652C0.351976 0.912791 0.479126 0.860131 0.611706 0.860131C0.744296 0.860131 0.871447 0.912791 0.965207 1.00652L3.61171 3.65302L6.25822 1.00652C6.30432 0.958771 6.35952 0.920671 6.42052 0.894471C6.48152 0.868271 6.54712 0.854471 6.61352 0.853901C6.67992 0.853321 6.74572 0.865971 6.80722 0.891111C6.86862 0.916251 6.92442 0.953381 6.97142 1.00032C7.01832 1.04727 7.05552 1.1031 7.08062 1.16454C7.10572 1.22599 7.11842 1.29183 7.11782 1.35822C7.11722 1.42461 7.10342 1.49022 7.07722 1.55122C7.05102 1.61222 7.01292 1.6674 6.96522 1.71352L4.31871 4.36002L6.96522 7.00648C7.05632 7.10078 7.10672 7.22708 7.10552 7.35818C7.10442 7.48928 7.05182 7.61468 6.95912 7.70738C6.86642 7.80018 6.74102 7.85268 6.60992 7.85388C6.47882 7.85498 6.35252 7.80458 6.25822 7.71348L3.61171 5.06702L0.965207 7.71348C0.870907 7.80458 0.744606 7.85498 0.613506 7.85388C0.482406 7.85268 0.357007 7.80018 0.264297 7.70738C0.171597 7.61468 0.119017 7.48928 0.117877 7.35818C0.116737 7.22708 0.167126 7.10078 0.258206 7.00648L2.90471 4.36002L0.258206 1.71352C0.164476 1.61976 0.111816 1.4926 0.111816 1.36002C0.111816 1.22744 0.164476 1.10028 0.258206 1.00652Z"
                    fill="currentColor"
                  />
                </svg>
              </button>
            </div>
            <div class="flex justify-center mt-5">
              <div class="w-full px-3">
                <label
                  for="monname"
                  class="block text-sm font-medium mb-2 dark:text-white"
                  >Monitor Name</label
                >
                <input
                  type="monname"
                  id="monname"
                  class="py-3 px-4 block w-[25%] border-gray-200 rounded-md text-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-zinc-900 dark:border-gray-700 dark:text-gray-400"
                  placeholder="google"
                />
                <label
                for="url"
                class="block text-sm font-medium mb-2 dark:text-white"
                >Monitor Url</label
              >
              <input
                type="url"
                id="monurl"
                class="py-3 px-4 block w-[25%] border-gray-200 rounded-md text-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-zinc-900 dark:border-gray-700 dark:text-gray-400"
                placeholder="Google.com"
              />
                <label
                  for="type"
                  class="block text-sm font-medium mb-2 dark:text-white mt-2"
                  >Type</label
                >
                <select
                  id="type"
                  class="py-3 px-4 pr-9 block w-[25%] border-gray-200 rounded-md text-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-zinc-900 dark:border-gray-700 dark:text-gray-400 mt-2"
                >
                  <option selected>http</option>
                  <option>tcp</option>
                  <option disabled>docker</option>
                </select>

                <label
                for="type"
                class="block text-sm font-medium mb-2 dark:text-white mt-2"
                >Check interval</label
              >
              <select
                id="inter"
                class="py-3 px-4 pr-9 block w-[25%] border-gray-200 rounded-md text-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-zinc-900 dark:border-gray-700 dark:text-gray-400 mt-2"
              >
                <option>1m</option>
                <option selected>5m</option>
                <option>10m</option>
              </select>

                <div class="flex items-center mt-3">
                  <input
                    type="checkbox"
                    id="tlscb"
                    class="relative mt-2 shrink-0 w-[3.25rem] h-7 bg-gray-100 checked:bg-none checked:bg-blue-600 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 border border-transparent ring-1 ring-transparent focus:border-blue-600 focus:ring-blue-600 ring-offset-white focus:outline-none appearance-none dark:bg-gray-700 dark:checked:bg-blue-600 dark:focus:ring-offset-gray-800 before:inline-block before:w-6 before:h-6 before:bg-white checked:before:bg-blue-200 before:translate-x-0 checked:before:translate-x-full before:shadow before:rounded-full before:transform before:ring-0 before:transition before:ease-in-out before:duration-200 dark:before:bg-gray-400 dark:checked:before:bg-blue-200"
                  />
                  <label
                    for="hs-basic-with-description-unchecked"
                    class="text-sm text-gray-500 ml-3 dark:text-gray-400"
                    >HTTPS/TCP</label
                  >
                </div>
                <button onclick="addmon()" class="flex items-center w-[25%] mt-2 gap-x-3.5 py-3 px-2.5 bg-gray-100 text-sm text-slate-700 rounded-md hover:bg-gray-100 dark:hover:bg-zinc-700/80 transition-colors dark:bg-zinc-900/80 dark:text-white">
                  Add!
                 </button>
              </div>

            </div>
          </div>
        </div>
      </header>
      <!-- End Page Heading -->
    </div>
    <!-- End Content -->
    <!-- ========== END MAIN CONTENT ========== -->
  </body>
  <script>
    const HSThemeAppearance = {
      init() {
        const defaultTheme = "default";
        let theme = localStorage.getItem("hs_theme") || defaultTheme;

        if (document.querySelector("html").classList.contains("dark")) return;
        this.setAppearance(theme);
      },
      _resetStylesOnLoad() {
        const $resetStyles = document.createElement("style");
        $resetStyles.innerText = `*{transition: unset !important;}`;
        $resetStyles.setAttribute("data-hs-appearance-onload-styles", "");
        document.head.appendChild($resetStyles);
        return $resetStyles;
      },
      setAppearance(theme, saveInStore = true, dispatchEvent = true) {
        const $resetStylesEl = this._resetStylesOnLoad();

        if (saveInStore) {
          localStorage.setItem("hs_theme", theme);
        }

        if (theme === "auto") {
          theme = window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "default";
        }

        document.querySelector("html").classList.remove("dark");
        document.querySelector("html").classList.remove("default");
        document.querySelector("html").classList.remove("auto");

        document
          .querySelector("html")
          .classList.add(this.getOriginalAppearance());

        setTimeout(() => {
          $resetStylesEl.remove();
        });

        if (dispatchEvent) {
          window.dispatchEvent(
            new CustomEvent("on-hs-appearance-change", { detail: theme })
          );
        }
      },
      getAppearance() {
        let theme = this.getOriginalAppearance();
        if (theme === "auto") {
          theme = window.matchMedia("(prefers-color-scheme: dark)").matches
            ? "dark"
            : "default";
        }
        return theme;
      },
      getOriginalAppearance() {
        const defaultTheme = "default";
        return localStorage.getItem("hs_theme") || defaultTheme;
      },
    };
    HSThemeAppearance.init();

    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", (e) => {
        if (HSThemeAppearance.getOriginalAppearance() === "auto") {
          HSThemeAppearance.setAppearance("auto", false);
        }
      });

    window.addEventListener("load", () => {
      const $clickableThemes = document.querySelectorAll(
        "[data-hs-theme-click-value]"
      );
      const $switchableThemes = document.querySelectorAll(
        "[data-hs-theme-switch]"
      );

      $clickableThemes.forEach(($item) => {
        $item.addEventListener("click", () =>
          HSThemeAppearance.setAppearance(
            $item.getAttribute("data-hs-theme-click-value"),
            true,
            $item
          )
        );
      });

      $switchableThemes.forEach(($item) => {
        $item.addEventListener("change", (e) => {
          HSThemeAppearance.setAppearance(
            e.target.checked ? "dark" : "default"
          );
        });

        $item.checked = HSThemeAppearance.getAppearance() === "dark";
      });

      window.addEventListener("on-hs-appearance-change", (e) => {
        $switchableThemes.forEach(($item) => {
          $item.checked = e.detail === "dark";
        });
      });
    });

    const Toast = Swal.mixin({
      toast: true,
      position: "bottom-right",
      customClass: {
        popup: "colored-toast",
      },
      showConfirmButton: false,
      timer: 1500,
      timerProgressBar: true,
    });

    /*
    monname
type
tlscb

    */
    document.getElementById('tlscb').addEventListener('change', (e) => {
  this.checkboxValue = e.target.checked ? 'on' : 'off';
  document.getElementById('tlscb').value = this.checkboxValue
})
    function addmon() {
      axios
        .post("/api/admin/monitor/add", {
          name: document.getElementById("monname").value,
          type: document.getElementById("type").value,
          tlscb: document.getElementById("tlscb").value,
          monurl: document.getElementById("monurl").value,
          int: document.getElementById("inter").value
        })
        .then((response) => {
          console.log(response.data);
          if (response.data.title == "Success!") {
            const alertDiv = document.createElement("div");
            alertDiv.classList.add(
              "bg-green-50",
              "absolute",
              "border",
              "border-green-200",
              "text-sm",
              "text-green-600",
              "rounded-md",
              "p-4",
              "m-4",
              "bottom-0",
              "right-0",
              "opacity-100",
              "transition-opacity",
              "duration-500",
              "m-4",
              "right-0",
              "bottom-0",
              "absolute"
            );
            alertDiv.setAttribute("role", "alert");
            const successSpan = document.createElement("span");
            successSpan.classList.add("font-bold");
            successSpan.textContent = "Success";
            const alertText = document.createTextNode(
              response.data.description
            );
            alertDiv.appendChild(successSpan);
            alertDiv.appendChild(alertText);
            const parentElement = document.getElementById("header");
            parentElement.appendChild(alertDiv);
            setTimeout(() => {
              alertDiv.style.opacity = 0;
              setTimeout(() => {
                alertDiv.remove();
              }, 500); // Remove the element after the fade-out animation duration (500 milliseconds)
            }, 3000); // 3000 milliseconds (3 seconds)
          } else if (response.data.title == "Oops!") {
            const alertDiv = document.createElement("div");
            alertDiv.classList.add(
              "bg-red-50",
              "border",
              "border-red-200",
              "mb-1",
              "text-sm",
              "text-red-600",
              "rounded-md",
              "p-4",
              "right-0",
              "opacity-100",
              "transition-opacity",
              "duration-500",
              "m-4",
              "right-0",
              "bottom-0",
              "absolute"
            );
            alertDiv.setAttribute("role", "alert");
            const successSpan = document.createElement("span");
            successSpan.classList.add("font-bold");
            successSpan.textContent = "Error";
            const alertText = document.createTextNode(
              " " + response.data.description
            );
            alertDiv.appendChild(successSpan);
            alertDiv.appendChild(alertText);
            const parentElement = document.getElementById("header");
            parentElement.appendChild(alertDiv);
            setTimeout(() => {
              alertDiv.style.opacity = 0;
              setTimeout(() => {
                alertDiv.remove();
              }, 500); // Remove the element after the fade-out animation duration (500 milliseconds)
            }, 3000); // 3000 milliseconds (3 seconds)
          }
        });
    }

    function closeinbox(cid) {
     axios.post("/api/inbox/delete", { cid: cid }).then( (response) => {
        Swal.fire({
         title: response.data.title,
         text: response.data.decription,
         icon: response.data.icon
         })
     })
    }
  </script>
</html>
